{"remainingRequest":"/home/stanaka/workspace_angular/angular-firebase-tasks/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/stanaka/workspace_angular/angular-firebase-tasks/node_modules/angularfire2/firestore/observable/fromRef.js","dependencies":[{"path":"/home/stanaka/workspace_angular/angular-firebase-tasks/node_modules/angularfire2/firestore/observable/fromRef.js","mtime":1516978436000},{"path":"/home/stanaka/workspace_angular/angular-firebase-tasks/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/stanaka/workspace_angular/angular-firebase-tasks/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Observable } from 'rxjs/Observable';\nimport { observeOn } from 'rxjs/operator/observeOn';\nimport { ZoneScheduler } from 'angularfire2';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/share';\nfunction _fromRef(ref) {\n    var ref$ = new Observable(function (subscriber) {\n        var unsubscribe = ref.onSnapshot(subscriber);\n        return { unsubscribe: unsubscribe };\n    });\n    return observeOn.call(ref$, new ZoneScheduler(Zone.current));\n}\nexport function fromRef(ref) {\n    return _fromRef(ref).share();\n}\nexport function fromDocRef(ref) {\n    return fromRef(ref)\n        .map(function (payload) { return ({ payload: payload, type: 'value' }); });\n}\nexport function fromCollectionRef(ref) {\n    return fromRef(ref).map(function (payload) { return ({ payload: payload, type: 'query' }); });\n}\n//# sourceMappingURL=fromRef.js.map",null]}